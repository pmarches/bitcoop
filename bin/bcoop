#!/bin/sh
# bcoop daemon start/stop script.

# Usually this is put in /etc/init.d (at least on machines SYSV R4 based
# systems) and linked to /etc/rc3.d/S99bcoop and /etc/rc0.d/K01bcoop.
# When this is done the bcoop server will be started when the machine is
# started and shut down when the systems goes down.

# Comments to support chkconfig on RedHat Linux
# chkconfig: 2345 90 20
# description: A P2P backup system

# Comments to support LSB init script conventions
### BEGIN INIT INFO
# Provides: bcoop
# Required-Start: $local_fs $network $remote_fs
# Required-Stop: $local_fs $network $remote_fs
# Default-Start:  2 3 4 5
# Default-Stop: 0 1 6
# Short-Description: start and stop bcoop
# Description: bcoop is a P2P backup system
### END INIT INFO
 
# If you install bcoop on some other places than /, then you
# have to do one of the following things for this script to work:
#
basedir=/root/bcoop

# The following variables are only set for letting bcoop.server find things.

# Set some defaults
pid_file=
if test -z "$basedir"
then
  basedir=/
  bindir=/root/bcoop/bin
else
  bindir="$basedir/bin"
fi

logFile="/var/log/bcoop.log"
PATH=/sbin:/usr/sbin:/bin:/usr/bin:$basedir/bin
export PATH

mode=$1    # start or stop

case `echo "testing\c"`,`echo -n testing` in
    *c*,-n*) echo_n=   echo_c=     ;;
    *c*,*)   echo_n=-n echo_c=     ;;
    *)       echo_n=   echo_c='\c' ;;
esac

#
# Test if someone changed datadir;  In this case we should also read the
# default arguments from this directory
#

extra_args=""

pid_file=/var/run/bcoop.pid

cd $basedir

case "$mode" in
  'start')
    # Start daemon

    jarlibs=`find $basedir/lib -name "*.jar" | awk '{printf "%s:", $1} END {print "."}' bcoopPath=$basedirh`
    $JAVA_HOME/bin/java -cp classes:$jarlibs bcoop.server.BCoopServer bcoop.server.ourPeerId=`hostname -s` > $logFile &
    echo $! > $pid_file
      
    # Make lock for RedHat / SuSE
    if test -w /var/lock/subsys
    then
	touch /var/lock/subsys/bcoop
    fi
    ;;

  'stop')
    # Stop daemon. We use a signal here to avoid having to know the
    # root password.
    if test -s "$pid_file"
    then
      bcoopd_pid=`cat $pid_file`
      echo "Killing bcoopd with pid $bcoopd_pid"
      kill $bcoopd_pid
      # bcoopd should remove the pid_file when it exits, so wait for it.

      sleep 1
      procFile=/proc/$bcoopd_pid
      while [ -d $procFile -a "$flags" != aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa ]
      do
	[ -z "$flags" ] && echo $echo_n "Wait for bcoopd to exit$echo_c" || echo $echo_n ".$echo_c"
        flags=a$flags
        sleep 1
      done
      if [ -d $procFile ]
         then echo " gave up waiting!"
      elif [ -n "$flags" ]
         then echo " done"
      fi
      # delete lock for RedHat / SuSE
      if test -f /var/lock/subsys/bcoop
      then
        rm -f /var/lock/subsys/bcoop
      fi
    else
      echo "No bcoopd pid file found. Looked for $pid_file."
    fi
    ;;

  'status')
    if [ ! -e $pid_file ]; then
       echo "bcoopd is stopped."
       exit 0
    fi
    bcoopd_pid=`cat $pid_file`
    procFile=/proc/$bcoopd_pid
    if [ -d $procFile ]; then
      echo "bcoop is alive and well with pid $bcoopd_pid"
      exit 0
    else
      echo "PID $bcoopd_pid is dead, removing stall pid file."
      rm -f $pid_file
      exit 1
    fi
    ;;
    
  'restart')
    # Stop the service and regardless of whether it was
    # running or not, start it again.
    $0 stop
    $0 start
		;;

  *)
    # usage
    echo "Usage: $0 start|stop|restart"
    exit 1
    ;;
esac
